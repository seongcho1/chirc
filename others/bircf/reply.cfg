#https://datatracker.ietf.org/doc/html/rfc2812#section-5

#   Numerics in the range from 001 to 099 are used for client-server
#   connections only and should never travel between servers.  Replies
#   generated in the response to commands are found in the range from 200
#   to 399.
000   = FOR TEST <...>

001   = Welcome to the <network> Network, <nick>[!<user>@<host>]
002   = Your host is <servername>, running version <version>
003   = This server was created <datetime>
004   = <servername> <version> <available user modes> <available channel modes>

#         - The server sends Replies 001 to 004 to a user upon
#           successful registration.

005   = Try server <server name>, port <port number>

#         - Sent by the server to a user to suggest an alternative
#           server.  This is often used when the connection is
#           refused because the server is already full.

221   = <user mode string>

#         - To answer a query about a client's own mode,
#           RPL_UMODEIS is sent back.

302   = :<reply list>

#         - Reply format used by USERHOST to list replies to
#           the query list.  The reply string is composed as
#           follows:
#
#           reply = nickname [ "*" ] "=" ( "+" / "-" ) hostname
#
#           The '*' indicates whether the client has registered
#           as an Operator.  The '-' or '+' characters represent
#           whether the client has set an AWAY message or not
#           respectively.

303   = :<nick list>

#         - Reply format used by ISON to list replies to the
#           query list.

301   = <nick> :<away message>
305   = :You are no longer marked as being away
306   = :You have been marked as being away

#         - These replies are used with the AWAY command (if
#           allowed).  RPL_AWAY is sent to any client sending a
#           PRIVMSG to a client which is away.  RPL_AWAY is only
#           sent by the server to which the client is connected.
#           Replies RPL_UNAWAY and RPL_NOWAWAY are sent when the
#           client removes and sets an AWAY message.

311   = <nick> <user> <host> * :<real name>
312   = <nick> <server> :<server info>
313   = <nick> :is an IRC operator

317   = <nick> <integer> :seconds idle
318   = <nick> :End of WHOIS list
319   = <nick> :*  <@/+> <channel>

#         - Replies 311 - 313, 317 - 319 are all replies
#           generated in response to a WHOIS message.  Given that
#           there are enough parameters present, the answering
#           server MUST either formulate a reply out of the above
#           numerics (if the query nick is found) or return an
#           error reply.  The '*' in RPL_WHOISUSER is there as
#           the literal character and not as a wild card.  For
#           each reply set, only RPL_WHOISCHANNELS may appear
#           more than once (for long lists of channel names).
#           The '@' and '+' characters next to the channel name
#           indicate whether a client is a channel operator or
#           has been granted permission to speak on a moderated
#           channel.  The RPL_ENDOFWHOIS reply is used to mark
#           the end of processing a WHOIS message.

314   = <nick> <user> <host> * :<real name>

369   = <nick> :End of WHOWAS

#         - When replying to a WHOWAS message, a server MUST use
#           the replies RPL_WHOWASUSER, RPL_WHOISSERVER or
#           ERR_WASNOSUCHNICK for each nickname in the presented
#           list.  At the end of all reply batches, there MUST
#           be RPL_ENDOFWHOWAS (even if there was only one reply
#           and it was an error).

#321       RPL_LISTSTART
#              Obsolete. Not used.

#322   = <channel> <# visible> :<topic>

323   = :End of LIST

#         - Replies RPL_LIST, RPL_LISTEND mark the actual replies
#           with data and end of the server's response to a LIST
#           command.  If there are no channels available to return,
#           only the end reply MUST be sent.

325   = <channel> <nickname>
324   = <channel> <mode> <mode params>

331   = <channel> :No topic is set
332   = <channel> :<topic>

#         - When sending a TOPIC message to determine the
#           channel topic, one of two replies is sent.  If
#           the topic is set, RPL_TOPIC is sent back else
#           RPL_NOTOPIC.


341   = <channel> <nick>

#         - Returned by the server to indicate that the
#           attempted INVITE message was successful and is
#           being passed onto the end client.

342   = <user> :Summoning user to IRC

#         - Returned by a server answering a SUMMON message to
#           indicate that it is summoning that user.

346   = <channel> <invitemask>
347   = <channel> :End of channel invite list

#         - When listing the 'invitations masks' for a given channel,
#           a server is required to send the list back using the
#           RPL_INVITELIST and RPL_ENDOFINVITELIST messages.  A
#           separate RPL_INVITELIST is sent for each active mask.
#           After the masks have been listed (or if none present) a
#           RPL_ENDOFINVITELIST MUST be sent.

348   = <channel> <exceptionmask>
349   = <channel> :End of channel exception list

#         - When listing the 'exception masks' for a given channel,
#           a server is required to send the list back using the
#           RPL_EXCEPTLIST and RPL_ENDOFEXCEPTLIST messages.  A
#           separate RPL_EXCEPTLIST is sent for each active mask.
#           After the masks have been listed (or if none present)
#           a RPL_ENDOFEXCEPTLIST MUST be sent.


351   = <version>.<debuglevel> <server> :<comments>

#         - Reply by the server showing its version details.
#           The <version> is the version of the software being
#           used (including any patchlevel revisions) and the
#           <debuglevel> is used to indicate if the server is
#           running in "debug mode".

#           The "comments" field may contain any comments about
#           the version or further version details.




#352   =     <channel> <user> <host> <server> <nick> ( "H" / "G" > ["*"] [ ( "@" / "+" ) ] :<hopcount> <real name>

315   = <name> :End of WHO list

#         - The RPL_WHOREPLY and RPL_ENDOFWHO pair are used
#           to answer a WHO message.  The RPL_WHOREPLY is only
#           sent if there is an appropriate match to the WHO
#           query.  If there is a list of parameters supplied
#           with a WHO message, a RPL_ENDOFWHO MUST be sent
#           after processing each list item with <name> being
#           the item.


#353   = ( "=" / "*" / "@" ) <channel> :[ "@" / "+" ] <nick> *( " " [ "@" / "+" ] <nick> )

#         - "@" is used for secret channels, "*" for private
#           channels, and "=" for others (public channels).

366   = <channel> :End of NAMES list

#         - To reply to a NAMES message, a reply pair consisting
#           of RPL_NAMREPLY and RPL_ENDOFNAMES is sent by the
#           server back to the client.  If there is no channel
#           found as in the query, then only RPL_ENDOFNAMES is
#           returned.  The exception to this is when a NAMES
#           message is sent with no parameters and all visible
#           channels and contents are sent back in a series of
#           RPL_NAMEREPLY messages with a RPL_ENDOFNAMES to mark
#           the end.

#364   = <mask> <server> :<hopcount> <server info>
#365   = <mask> :End of LINKS list

#         - In replying to the LINKS message, a server MUST send
#           replies back using the RPL_LINKS numeric and mark the
#           end of the list using an RPL_ENDOFLINKS reply.

367   = <channel> <banmask>
368   = <channel> :End of channel ban list

#         - When listing the active 'bans' for a given channel,
#           a server is required to send the list back using the
#           RPL_BANLIST and RPL_ENDOFBANLIST messages.  A separate
#           RPL_BANLIST is sent for each active banmask.  After the
#           banmasks have been listed (or if none present) a
#           RPL_ENDOFBANLIST MUST be sent.

371   = :<string>
374   = :End of INFO list

#         - A server responding to an INFO message is required to
#           send all its 'info' in a series of RPL_INFO messages
#           with a RPL_ENDOFINFO reply to indicate the end of the
#           replies.


375   = :- <server> Message of the day -
372   = :- <text>
376   = :End of MOTD command

#         - When responding to the MOTD message and the MOTD file
#           is found, the file is displayed line by line, with
#           each line no longer than 80 characters, using
#           RPL_MOTD format replies.  These MUST be surrounded
#           by a RPL_MOTDSTART (before the RPL_MOTDs) and an
#           RPL_ENDOFMOTD (after).

381   = :You are now an IRC operator

#         - RPL_YOUREOPER is sent back to a client which has
#           just successfully issued an OPER message and gained
#           operator status.

382   = <config file> :Rehashing

#         - If the REHASH option is used and an operator sends
#           a REHASH message, an RPL_REHASHING is sent back to
#           the operator.

383   = You are service <servicename>

#         - Sent by the server to a service upon successful
#           registration.

391   = <server> :<string showing local time of the server>

#         - When replying to the TIME message, a server MUST send
#           the reply using the RPL_TIME format above.  The string
#           showing the time need only contain the correct day and
#           time there.  There is no further requirement for the
#           time string.

392   = :UserID   Terminal  Host
393   = :<username> <ttyline> <hostname>
394   = :End of users
395   = :Nobody logged in

#         - If the USERS message is handled by a server, the
#           replies RPL_USERSTART, RPL_USERS, RPL_ENDOFUSERS and
#           RPL_NOUSERS are used.  RPL_USERSSTART MUST be sent
#           first, following by either a sequence of RPL_USERS
#           or a single RPL_NOUSER.  Following this is
#           RPL_ENDOFUSERS.

200   = Link <version & debug level> <destination> <next server> V<protocol version> <link uptime in seconds> <backstream sendq> <upstream sendq>
201   = Try. <class> <server>
202   = H.S. <class> <server>
203   = ???? <class> [<client IP address in dot form>]
204   = Oper <class> <nick>
205   = User <class> <nick>
206   = Serv <class> <int>S <int>C <server> <nick!user|*!*>@<host|server> V<protocol version>
207   = Service <class> <name> <type> <active type>
208   = <newtype> 0 <client name>
209   = Class <class> <count>
210   = Unused.
261   = File <logfile> <debug level>
262   = <server name> <version & debug level> :End of TRACE

#         - The RPL_TRACE* are all returned by the server in
#           response to the TRACE message.  How many are
#           returned is dependent on the TRACE message and
#           whether it was sent by an operator or not.  There
#           is no predefined order for which occurs first.
#           Replies RPL_TRACEUNKNOWN, RPL_TRACECONNECTING and
#           RPL_TRACEHANDSHAKE are all used for connections
#           which have not been fully established and are either
#           unknown, still attempting to connect or in the
#           process of completing the 'server handshake'.
#           RPL_TRACELINK is sent by any server which handles
#           a TRACE message and has to pass it on to another
#           server.  The list of RPL_TRACELINKs sent in
#           response to a TRACE command traversing the IRC
#           network should reflect the actual connectivity of
#           the servers themselves along that path.
#           RPL_TRACENEWTYPE is to be used for any connection
#           which does not fit in the other categories but is
#           being displayed anyway.
#           RPL_TRACEEND is sent to indicate the end of the list.

211   = <linkname> <sendq> <sent messages> <sent Kbytes> <received messages> <received Kbytes> <time open>

#         - reports statistics on a connection.  <linkname>
#           identifies the particular connection, <sendq> is
#           the amount of data that is queued and waiting to be
#           sent <sent messages> the number of messages sent,
#           and <sent Kbytes> the amount of data sent, in
#           Kbytes. <received messages> and <received Kbytes>
#           are the equivalent of <sent messages> and <sent
#           Kbytes> for received data, respectively.  <time
#           open> indicates how long ago the connection was
#           opened, in seconds.

212   = <command> <count> <byte count> <remote count>

#         - reports statistics on commands usage.

219   = <stats letter> :End of STATS report

242   = :Server Up %d days %d:%02d:%02d

#         - reports the server uptime.

243   = O <hostmask> * <name>

#         - reports the allowed hosts from where user may become IRC
#           operators.

221   = <user mode string>

#         - To answer a query about a client's own mode,
#           RPL_UMODEIS is sent back.


234   = <name> <server> <mask> <type> <hopcount> <info>
235   = <mask> <type> :End of service listing

#         - When listing services in reply to a SERVLIST message,
#           a server is required to send the list back using the
#           RPL_SERVLIST and RPL_SERVLISTEND messages.  A separate
#           RPL_SERVLIST is sent for each service.  After the
#           services have been listed (or if none present) a
#           RPL_SERVLISTEND MUST be sent.


251   = :There are <integer> users and <integer> services on <integer> servers
252   = <integer> :operator(s) online
253   = <integer> :unknown connection(s)
254   = <integer> :channels formed
255   = :I have <integer> clients and <integer> servers

#         - In processing an LUSERS message, the server
#           sends a set of replies from RPL_LUSERCLIENT,
#           RPL_LUSEROP, RPL_USERUNKNOWN,
#           RPL_LUSERCHANNELS and RPL_LUSERME.  When
#           replying, a server MUST send back
#           RPL_LUSERCLIENT and RPL_LUSERME.  The other
#           replies are only sent back if a non-zero count
#           is found for them.

256   = <server> :Administrative info
257   = :<admin info>
258   = :<admin info>
259   = :<admin info>

#         - When replying to an ADMIN message, a server
#           is expected to use replies RPL_ADMINME
#           through to RPL_ADMINEMAIL and provide a text
#           message with each.  For RPL_ADMINLOC1 a
#           description of what city, state and country
#           the server is in is expected, followed by
#           details of the institution (RPL_ADMINLOC2)
#           and finally the administrative contact for the
#           server (an email address here is REQUIRED)
#           in RPL_ADMINEMAIL.

263   = <command> :Please wait a while and try again.

#         - When a server drops a command without processing it,
#           it MUST use the reply RPL_TRYAGAIN to inform the
#           originating client.


################################

#5.2 Error Replies

#       Error replies are found in the range from 400 to 599.

401   = <nickname> :No such nick/channel

#          - Used to indicate the nickname parameter supplied to a
#            command is currently unused.

402   = <server name> :No such server

#         - Used to indicate the server name given currently
#           does not exist.

403   = <channel name> :No such channel

#         - Used to indicate the given channel name is invalid.

404   = <channel name> :Cannot send to channel

#         - Sent to a user who is either (a) not on a channel
#           which is mode +n or (b) not a chanop (or mode +v) on
#           a channel which has mode +m set or where the user is
#           banned and is trying to send a PRIVMSG message to
#           that channel.

405   = <channel name> :You have joined too many channels

#         - Sent to a user when they have joined the maximum
#           number of allowed channels and they try to join
#           another channel.


406   = <nickname> :There was no such nickname

#         - Returned by WHOWAS to indicate there is no history
#           information for that nickname.

407   = <target> :<error code> recipients. <abort message>

#         - Returned to a client which is attempting to send a
#           PRIVMSG/NOTICE using the user@host destination format
#           and for a user@host which has several occurrences.

#         - Returned to a client which trying to send a
#           PRIVMSG/NOTICE to too many recipients.

#         - Returned to a client which is attempting to JOIN a safe
#           channel using the shortname when there are more than one
#           such channel.

408   = <service name> :No such service

#         - Returned to a client which is attempting to send a SQUERY
#           to a service which does not exist.

409   = :No origin specified

#         - PING or PONG message missing the originator parameter.

411   = :No recipient given (<command>)
412   = :No text to send
#413    = <mask> :No toplevel domain specified
#414    = <mask> :Wildcard in toplevel domain
#415    = <mask> :Bad Server/host mask

#         - 412 - 415 are returned by PRIVMSG to indicate that
#           the message wasn't delivered for some reason.
#           ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are errors that
#           are returned when an invalid use of
#           "PRIVMSG $<server>" or "PRIVMSG #<host>" is attempted.

421   = <command> :Unknown command

#         - Returned to a registered client to indicate that the
#           command sent is unknown by the server.

422   = :MOTD File is missing

#         - Server's MOTD file could not be opened by the server.

423   = <server> :No administrative info available

#         - Returned by a server in response to an ADMIN message
#           when there is an error in finding the appropriate
#           information.

424   = :File error doing <file op> on <file>

#         - Generic error message used to report a failed file
#           operation during the processing of a message.

431   = :No nickname given

#         - Returned when a nickname parameter expected for a
#           command and isn't found.

432   = <nick> :Erroneous nickname

#         - Returned after receiving a NICK message which contains
#           characters which do not fall in the defined set.  See
#           section 2.3.1 for details on valid nicknames.

433   = <nick> :Nickname is already in use

#         - Returned when a NICK message is processed that results
#           in an attempt to change to a currently existing
#           nickname.

436   = <nick> :Nickname collision KILL from <user>@<host>

#         - Returned by a server to a client when it detects a
#           nickname collision (registered of a NICK that
#           already exists by another server).

437   = <nick/channel> :Nick/channel is temporarily unavailable

#         - Returned by a server to a user trying to join a channel
#           currently blocked by the channel delay mechanism.

#         - Returned by a server to a user trying to change nickname
#           when the desired nickname is blocked by the nick delay
#           mechanism.

441   = <nick> <channel> :They are not on that channel

#         - Returned by the server to indicate that the target
#           user of the command is not on the given channel.

442   = <channel> :You are not on that channel

#         - Returned by the server whenever a client tries to
#           perform a channel affecting command for which the
#           client isn't a member.

443   = <user> <channel> :is already on channel

#         - Returned when a client tries to invite a user to a
#           channel they are already on.

444   = <user> :User not logged in

#         - Returned by the summon after a SUMMON command for a
#           user was unable to be performed since they were not
#           logged in.

445   = :SUMMON has been disabled

#         - Returned as a response to the SUMMON command.  MUST be
#           returned by any server which doesn't implement it.

446   = :USERS has been disabled

#         - Returned as a response to the USERS command.  MUST be
#           returned by any server which does not implement it.

451   = :You have not registered

#         - Returned by the server to indicate that the client
#           MUST be registered before the server will allow it
#           to be parsed in detail.

461   = <command> :Not enough parameters

#         - Returned by the server by numerous commands to
#           indicate to the client that it didn't supply enough
#           parameters.

462   = :Unauthorized command (already registered)

#         - Returned by the server to any link which tries to
#           change part of the registered details (such as
#           password or user details from second USER message).

463   = :Your host is not among the privileged

#         - Returned to a client which attempts to register with
#           a server which does not been setup to allow
#           connections from the host the attempted connection
#           is tried.

464   = :Password incorrect

#         - Returned to indicate a failed attempt at registering
#           a connection for which a password was required and
#           was either not given or incorrect.

465   = :You are banned from this server

#         - Returned after an attempt to connect and register
#           yourself with a server which has been setup to
#           explicitly deny connections to you.

466   = ERR_YOUWILLBEBANNED

#         - Sent by a server to a user to inform that access to the
#           server will soon be denied.

467   = <channel> :Channel key already set

471   = <channel> :Cannot join channel (+l)
472   = <char> :is unknown mode char to me for <channel>
473   = <channel> :Cannot join channel (+i)
474   = <channel> :Cannot join channel (+b)
475   = <channel> :Cannot join channel (+k)
476   = <channel> :Bad Channel Mask
477   = <channel> :Channel does not support modes
478   = <channel> <char> :Channel list is full

481   = :Permission Denied- You are not an IRC operator

#         - Any command requiring operator privileges to operate
#           MUST return this error to indicate the attempt was
#           unsuccessful.

482   = <channel> :You are not channel operator

#         - Any command requiring 'chanop' privileges (such as
#           MODE messages) MUST return this error if the client
#           making the attempt is not a chanop on the specified
#           channel.

483   = :You can not kill a server!

#         - Any attempts to use the KILL command on a server
#           are to be refused and this error returned directly
#           to the client.

484   = :Your connection is restricted!

#         - Sent by the server to a user upon connection to indicate
#           the restricted nature of the connection (user mode "+r").

485   = :You are not the original channel operator

#         - Any MODE requiring "channel creator" privileges MUST
#           return this error if the client making the attempt is not
#           a chanop on the specified channel.

491   = :No O-lines for your host

#         - If a client sends an OPER message and the server has
#           not been configured to allow connections from the
#           client's host as an operator, this error MUST be
#           returned.

501   = :Unknown MODE flag

#         - Returned by the server to indicate that a MODE
#           message was sent with a nickname parameter and that
#           the a mode flag sent was not recognized.

502   = :Cannot change mode for other users

#         - Error sent to any user trying to view or change the
#           user mode for a user other than themselves.




#5.3 Reserved numerics
#
#   These numerics are not described above since they fall into one of
#   the following categories:
#
#   1. no longer in use;
#
#
#Kalt                         Informational                     [Page 59]
#
#RFC 2812          Internet Relay Chat: Client Protocol        April 2000
#
#   2. reserved for future planned use;
#
#   3. in current use but are part of a non-generic 'feature' of
#      the current IRC server.
#
#            231    RPL_SERVICEINFO     232  RPL_ENDOFSERVICES
#            233    RPL_SERVICE
#            300    RPL_NONE            316  RPL_WHOISCHANOP
#            361    RPL_KILLDONE        362  RPL_CLOSING
#            363    RPL_CLOSEEND        373  RPL_INFOSTART
#            384    RPL_MYPORTIS
#
#            213    RPL_STATSCLINE      214  RPL_STATSNLINE
#            215    RPL_STATSILINE      216  RPL_STATSKLINE
#            217    RPL_STATSQLINE      218  RPL_STATSYLINE
#            240    RPL_STATSVLINE      241  RPL_STATSLLINE
#            244    RPL_STATSHLINE      244  RPL_STATSSLINE
#            246    RPL_STATSPING       247  RPL_STATSBLINE
#            250    RPL_STATSDLINE
#
#            492    ERR_NOSERVICEHOST
